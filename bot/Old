    @commands.command()
    async def dm(self, ctx, user: discord.User = None, *, value = None):
        if ctx.channel.id != '1249622884096278578':
            return
        if user == ctx.message.author:
            await ctx.send(value)
        else:
            await ctx.message.delete()
            if user == None:
                 await ctx.send(f'**{ctx.message.author},** Please mention somebody to DM.')
            else:
                 if value == None:
                     await ctx.send(f'**{ctx.message.author},** Please send a message to DM.')
                 else:
                     await user.send(value)

    def getUUID(query: str):
        # Get suggestions from the GSRS for a query as string and return it's UUID
        api = 'https://gsrs.ncats.nih.gov/ginas/app/api/v1/suggest?q='
        response = requests.get(f'{api}{query}')
        if response.ok:
            json = response.json()
            name = json.get('Name', [])
            key = max(name, key=lambda x: x['weight'])
            api = f'https://gsrs.ncats.nih.gov/ginas/app/api/v1/substances({key['key']})'
            response = requests.get(api)
            if response.ok:
                json = response.json()
                uuid = json['uuid']
                return uuid
            else:
                raise Exception("~/substances(<uuid>) HTTPS response failed.")
        else:
            raise Exception("~/suggest?q=<query> HTTPS response failed.")

    @commands.command(description='Usage: !get <chemical>')
    async def get(self, ctx: commands.Context, *args):
        for arg in args:
           if Commands.verifyQuery(arg):
               uuid = Commands.getUUID(arg)
               api = f'https://gsrs.ncats.nih.gov/api/v1/substances/render({uuid})?format=png&size=500&stereo=false&cache-control=nrlisecslxc'
               response = requests.get(api)
               if response.ok:
                   png = response.content
                   io.BytesIO(png).seek(0)
                   await ctx.send(file=discord.File(io.BytesIO(png), f'{arg}.png'))
                   await ctx.send(f'I found {arg}.png!')
               else:
                   raise Exception('~/substances/render(<uuid>)?format=svg&size=500&cache-control=nrlisecslxc HHTPS response failed.')
           else:
              ctx.send(f'There is no Wikipedia page for {arg}, what are you talking about?')

    def getMol(uuid: int):
        # Get a .mol from the GSRS from a UUID
        api = f'https://gsrs.ncats.nih.gov/ginas/app/api/v1/substances({uuid})/structure/molfile'
        response = requests.get(api)
        if response.ok:
             json = response.json()
             mol = Chem.MolFromMolBlock(json)
             return mol
        else:
            raise Exception("~/substances(<uuid>)/structure/molfile HTTPS response failed.")
#    @commands.command()
#    async def roll(self, ctx: commands.Context, die: int):
#        try:
#            quantity = random.randint(1, die)
#            await ctx.send(f'Out of {die} you rolled a {quantity}!')
#        except Exception as e:
#            await ctx.send(f'Error: {e}')

    def verifyQuery(query: str):
        return True
        # Verify whether a query is a real Wikipedia page
#        USER_AGENT = "Lucy/1.0 (https://github.com/brandongrahamcobb/css-html-js-py)"
#        wiki = wikipediaapi.Wikipedia(user_agent=USER_AGENT, language='en')
#        page = wiki.page(query)
#        if 'chemical' in page.text.lower() or query == '1P-LSD':
#            return True
#        else:
#            raise Exception('Wikipedia page with "chemical" not found.')
#            return False

    @commands.command()
    async def clear(self, ctx: commands.Context):
            try:
                if ctx.author.id == 154749533429956608:
                    await ctx.send(f'Cleared!')
                    await ctx.channel.purge(check=lambda msg: not msg.pinned)
            except Exception as e:
                user = await self.bot.fetch_user('154749533429956608')
                await user.send(f'Error: {e}')

        self._last_member = None

    async def warn(self, ctx: commands.Context, e: Exception) -> None:
        await ctx.send(e)
        user = await self.bot.fetch_user('154749533429956608')
        await user.send(f'Error:\n{ctx.guild.name}\n{ctx.author.name}\n{ctx.message.content}\n{e}')
        print(f'Error: {traceback.print_stack()}')
        return

        self._last_member = None

#    def getGenericHeaders():
#        with open('version.txt', 'r') as f:
#             version = f.read().strip()
#        major, minor, patch = map(int, version.split('.'))
#        patch += 1
#        if patch >= 10:
#            patch = 0
#            minor += 1
#        if minor >= 10:
#            minor = 0
#            major += 1
#        version = f"{major}.{minor}.{patch}"
#        headers = {
#            'User-Agent': 'Lucy / {version}'
#        }
#        return headers

    def getScriptureHeaders():
        with open('version.txt', 'r') as f:
             version = f.read().strip()
        major, minor, patch = map(int, version.split('.'))
        patch += 1
        if patch >= 10:
            patch = 0
            minor += 1
        if minor >= 10:
            minor = 0
            major += 1
        version = f"{major}.{minor}.{patch}"
        headers = {
            'User-Agent': 'Lucy / {version}',
            'api-key': '2eb327f99245cd3d68da55370656d6e2'
        }
        return headers

#    @commands.command(description='Usage !art')
#    async def art(self, ctx: commands.Context):
#        file_list = [
#            "/home/spawd/Pictures/CobbBrandonGraham_Art_1_110721.jpg",
#            "/home/spawd/Pictures/CobbBrandonGraham_Art_2_090123.png"
#        ]
#        random_weed = random.choice(file_list)
#        try:
#            with open(random_weed, 'rb') as f:
#                await ctx.send(file=discord.File(f))
#        except Exception as e:
#            await Command.warn(e)

    @commands.command(description='Usage: attach file and !colors <color_count>')
    async def colors(self, ctx: commands.Context, *args):
        try:
            attachment = ctx.message.attachments[0]
            img_data = requests.get(attachment.url).content
            image = Image.open(io.BytesIO(img_data))
            image = image.resize((100, 100))
            image = image.convert('RGB')
            pixels = list(image.getdata())
            pixels = [pixel for pixel in pixels if not (pixel[0] > 150 and pixel[1] > 150 and pixel[2] > 150)]
            pixels = [pixel for pixel in pixels if not (pixel[0] < 10 and pixel[1] < 10 and pixel[2] < 10)]
            color_counts = Counter(pixels)
            predominant_colors = color_counts.most_common(int(args[0]))
            message = "Predominant colors (excluding whites above (150, 150, 150)):\n"
            for color, count in predominant_colors:
                message += f"Color: {color} Count: {count}\n"
            await ctx.send(message)
        except Exception as e:
            await Command.warn(self, ctx, e)

    @commands.command(description='Usage !script <NIV/ESV> <Book>.<Chapter>.<Verse>')
    async def script(self, ctx: commands.Context, version: str, *, reference: str):
         try:
             BIBLE_IDS = {
                 'esv': 'de4e12af7f28f599-02',
                 'nkjv': 'de4e12af7f28f599-01',
                 'niv': '06125adad2d5898a-01',
             }
             version = version.lower()
             if version in BIBLE_IDS:
                 bible_id = BIBLE_IDS[version]
                 api = f'https://api.scripture.api.bible/v1/bibles/{bible_id}/search?query={reference}'
                 response = requests.get(api, headers=Command.getScriptureHeaders())
                 if response.ok:
                     json = response.json()
                     passages = json.get('data', {}).get('passages', [])
                     soup = BeautifulSoup(passages[0].get('content'), 'html.parser')
                     soup.get_text()
                     cleaned_content = soup.get_text()
                     message = f'**{reference}** ({version.upper()})\n{cleaned_content}'
                     await ctx.send(message)
#             if version == '':
#                 response = requests.get(f'https://api.alquran.cloud/v1/ayah/{reference}/en.asad', headers=Command.getGenericHeaders())
#                 if response.ok:
#                     json = response.json()
#                     message = f'**{reference}** ({version.upper()})\n{json['data']['text']}'
#                     await ctx.send(message)
         except Exception as e:
            await Command.warn(self, ctx, e)

#    @commands.command(description='Usage !roll <#>')
#    async def roll(self, ctx: commands.Context, die: int):
#        try:
#            quantity = random.randint(1, die)
#            await ctx.send(f'Out of {die} you rolled a {quantity}!')
#        except Exception as e:
#            await Command.warn(e)

#    @commands.command(description='Usage !vegan')
#    async def vegan(self, ctx: commands.Context):
#        await ctx.send('https://www.anonymousforthevoiceless.org/')
#        await ctx.send('https://www.dontwatch.org/')
#        await ctx.send('https://www.vegansociety.com/')
